<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://superpony.github.io/</id>
    <title>SuperPony&apos;s Blog</title>
    <updated>2020-02-07T14:45:30.045Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://superpony.github.io/"/>
    <link rel="self" href="https://superpony.github.io/atom.xml"/>
    <subtitle>Just for fun</subtitle>
    <logo>https://superpony.github.io/images/avatar.png</logo>
    <icon>https://superpony.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, SuperPony&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[常用的文件操作]]></title>
        <id>https://superpony.github.io/post/chang-yong-de-wen-jian-cao-zuo</id>
        <link href="https://superpony.github.io/post/chang-yong-de-wen-jian-cao-zuo">
        </link>
        <updated>2020-02-07T09:03:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>对于一个文件的操作而言，通常情况下是三个步骤：1.打开冰箱，2.将大象塞进去，3.关上冰箱。（开个玩笑😇）。重来一遍，对于一个文件进行操作，通常是三个步骤，1.打开并获取指定的文件资源，2. 对该文件资源进行相关的业务逻辑操作, 3.关闭文件资源。</p>
<p>而之所以记录这篇笔记，目的在于加深对于文件操作的一些常用方法的印象，以及示范。</p>
<h1 id="打开文件">打开文件</h1>
<p>os.Open(file string) (f *file, err error)</p>
<h1 id="关闭文件">关闭文件</h1>
<p>f.Close() error</p>
<h1 id="读取文件">读取文件</h1>
<h2 id="os-包下-funcfile-read">os 包下 func(*File) Read</h2>
<p><code>f.Read(b []byte )(n int, err error)</code>： 从指定文件资源中读取最多 b 的长度字节数并写入  b。返回读取的字节数，以及可能遇到的错误。当 n 等于 0 或是 err 等于 io.EOF 时，表示文件已经读到末尾。</p>
<p>可以通过轮询的方式，不停的将读取到的字节写入 b，当 err 等于 io.EOF 时，跳出循环。</p>
<pre><code>func main() {
	fileObj, err := os.Open(&quot;src/demo/demo.txt&quot;)
	if err != nil {
		log.Println(err)
		return
	}
	defer fileObj.Close()

	var b [3]byte
	res := make([]byte, 0)
	for {
		n, err := fileObj.Read(b[:]) // 每次传入 b 数组的切片

		if err == io.EOF { // 文件读完，停止轮询
			break
		}

		if err != nil { // 读取失败，直接打印错误日志，终止函数运行
			log.Println(err)
			return
		}

		res = append(res, b[:n]...) // 将 b 的切片 打散追加进 res 切片。
	}
	fmt.Println(string(res), res)
}
</code></pre>
<h2 id="bufio-包下的-func-reader-readstring">bufio 包下的 func (*Reader) ReadString</h2>
<p><code>func (r *Reader) ReadString(delim byte) (line string, err error)</code> : 读取直到第一次遇见 delim 的字节。然后返回包含 delim 字节和已经读取的数据的字符串。当该方法在读取到 delim 字节之前遇到了错误，则会返回遇到错误之前的数据，以及该错误 （一般是 io.EOF）。<br>
该方法想要读取整个文件与 os 包的 Read 方法类似，都可以通过轮询的方式来读取，但是该方法有一个弊端，即 不是所有的文件类型的换行都是 \n，比如说 txt 文件。 所以通过 ReadString 方法并不能兼容所有文件类型。</p>
<pre><code>func main() {
	fileObj, err := os.Open(&quot;src/demo/demo.js&quot;)
	if err != nil {
		log.Println(err)
		return
	}
	defer fileObj.Close()

	if err != nil {
		fmt.Println(&quot;open file err:&quot;, err.Error())
		return
	}

	// 处理结束后关闭文件
	defer fileObj.Close()

	rd := bufio.NewReader(fileObj)
	for {

		str, err := rd.ReadString('\n')
		if err == io.EOF {
            return
		}

		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Print(str)
	}
}
</code></pre>
<h2 id="简单直接的-ioutil-包下的-readallreadfile">简单直接的 ioutil 包下的 ReadAll/ReadFile</h2>
<p><code>func ReadAll(r io.Reader) ([]byte, error)</code> : 直接从 r 读取直到 EOF 或遇到 error 。函数成功时， error 为 nil。</p>
<p><code>func ReadFile(fileName) ([]byte, error)</code> : 和 ReadAll 相似，只是该函数直接传入文件路径。</p>
<pre><code>func main() {

	file := &quot;src/demo/demo.txt&quot;
	str, err := ioutil.ReadFile(file)

	fileObj, _ := os.Open(file)
	defer fileObj.Close()

	str2, err2 := ioutil.ReadAll(fileObj)

	if err != nil || err2 != nil {
		fmt.Println(err)
		return
	}

	fmt.Print(string(str))
	fmt.Print(string(str2))
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[return 和 defer 的底层运行步骤]]></title>
        <id>https://superpony.github.io/post/han-shu-zhong-de-return-he-defer</id>
        <link href="https://superpony.github.io/post/han-shu-zhong-de-return-he-defer">
        </link>
        <updated>2020-02-07T01:35:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>先看几个例子</p>
<pre><code>func f1() int {
	x := 5
	defer func() {
		x++
	}()

	return x
}

func f2() (x int) {
	x = 5
	defer func() {
		x++
	}()

	return
}

func f3() (x int) {
	defer func() {
		x++
	}()

	return 5
}

func f4() (x int) {
	defer func(x int) {
		x++
	}(x)

	return 5
}

func main() {
	fmt.Println(f1()) // 5
	fmt.Println(f2()) // 6
	fmt.Println(f3()) // 6
	fmt.Println(f4()) // 5
}
</code></pre>
<p>在日常开发中， defer 通常是用来做一些收尾工作的事情，例如 文件句柄关闭。上述的例子几乎不太可能出现在实际的日常开发中。但是，这几个例子对于理解 return、defer 的底层执行步骤是有很大帮助的。</p>
<h1 id="return-和-defer-运行机制">return 和 defer 运行机制</h1>
<h2 id="return">return</h2>
<p><strong>return 并不是一个具有原子性的操作。</strong> 在一个函数 return 的时候，例如 return x ，其实底层是执行了两个步骤：</p>
<ol>
<li>将 x 赋予实际返回值。</li>
<li>执行 RET 指令。</li>
</ol>
<h2 id="defer">defer</h2>
<p>当函数中有 defer 操作时，则会将 defer 插入到 return 的步骤 1 和 2 之间。从而使 return 的步骤变为了3步：</p>
<ol>
<li>将 x 赋予实际返回值。</li>
<li>执行 defer 的代码片段。</li>
<li>执行 RET 指令。</li>
</ol>
<h2 id="示意图">示意图</h2>
<p><img src="https://superpony.github.io//post-images/1581086636037.png" alt="" loading="lazy"><br>
该图片取自: <a href="https://www.liwenzhou.com/posts/Go/09_function">https://www.liwenzhou.com/posts/Go/09_function</a> , 而且该博主做的 go 语言教程，笔者个人觉着做的很细致，很值得学习。</p>
<h1 id="回到例子">回到例子</h1>
<p>当明白 return 和 defer 在底层是怎么跑的以后，其实在看刚才例子就已经很好理解了。</p>
<pre><code>func f1() int {
	x := 5
	defer func() {
		x++ // 2. 此时操作 x 并不会影响到实际返回值
	}()

	return x // 1. return 已经将 x 赋予实际返回值
}

func f2() (x int) { // 声明返回值变量
	x = 5
	defer func() {
		x++ // 操作的是返回值的变量，所以最终返回值是 6
	}()

	return
}

func f3() (x int) {
	defer func() {
		x++ // 和 f2() 同理， defer 内操作的都是实际的函数返回值变量
	}()

	return 5
}

func f4() (x int) {
	defer func(x int) {
		x++ // go 中的函数传参都是值传递，传递的都是参数的副本，所以这里的 x++ 其实是在对 x 参数的拷贝进行的操作，因此是返回值是 5
	}(x)

	return 5
}

func main() {
	fmt.Println(f1()) // 5
	fmt.Println(f2()) // 6
	fmt.Println(f3()) // 6
	fmt.Println(f4()) // 5
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ES6 中的箭头函数]]></title>
        <id>https://superpony.github.io/post/es6-zhong-de-jian-tou-han-shu</id>
        <link href="https://superpony.github.io/post/es6-zhong-de-jian-tou-han-shu">
        </link>
        <updated>2019-12-07T11:39:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>由于 普通函数中 this 的指向的巨大灵活性，虽然让编程变得灵活，但同时也因此，时常会出现意想不到的情况发生，所以这也是 ES6 中，推出箭头函数的主要动机。</p>
<h1 id="定义">定义</h1>
<p>箭头函数的定义由 0个或多个参数列表组成，紧接着是一个 <code>=&gt;</code> 符号，然后是一个函数体。任何 <code>function</code> 声明的函数可以实现的功能，箭头函数都可以现实。</p>
<pre><code>    var foo = () =&gt; {
      console.log('a')
    }
    foo()
    foo = r =&gt; r
    console.log(foo('b'))
    foo = (paramA, paramB) =&gt; {
      // code...
    }
</code></pre>
<h2 id="注意">注意</h2>
<ul>
<li>
<p>箭头函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象.也可以说， 箭头函数的 this 直接继承了外部的 this（因为箭头函数根本没有自己的 this）。</p>
</li>
<li>
<p>当没有 <code>{}</code> 包裹代码块时，代表着直接 <code>return code...</code></p>
</li>
<li>
<p>箭头函数如果直接返回一个对象，需要用<code>()</code> 包裹。例如 <code>var demo = ()=&gt;({....})</code>。</p>
</li>
<li>
<p>不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。</p>
</li>
<li>
<p>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
</li>
<li>
<p>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</p>
</li>
</ul>
<h1 id="this-指向">this 指向</h1>
<p>箭头函数的最主要的设计初衷，就是为了解决传统 <code>function</code> 中 <code>this</code> 指向的问题。 箭头函数中 <code>this</code> 的指向，就是定义的箭头函数。</p>
<pre><code>    var obj = {
      name: 'obj',
      funcA: function() {
        console.log(this)
      },
      funcB: () =&gt; {
        console.log(this)
      },
      funcC() {
        ;(() =&gt; {
          console.log(this)
        })()
      }
    }
    obj.funcA() // 因为 obj 在调用时，拥有着外部环境对象 obj，所以 这里的 this 指向了 obj 对象。
    obj.funcB() // 因为箭头函数直接继承了 外部的 this，所以 这里是 window。
    obj.funcC() // 这里的 funcC 由于拥有上下文环境对象 obj， 因此箭头函数继承了 funcC 的 this，所以输出 obj 对象。
    var demo = obj.funcC
    demo() // 因为demo 是对 funcC 的引用，所以 demo 的上下文环境是 winodw，所以内部的箭头函数输出 window 对象
</code></pre>
<h1 id="箭头函数的优缺点">箭头函数的优缺点</h1>
<h2 id="优点">优点</h2>
<ul>
<li>语法上更加简洁，适用于一些代码量短小的代码模块，例如一些计算数值的操作。</li>
<li>this 的指向相对固定，出现不可预料的情况机率更小。</li>
</ul>
<h2 id="缺点">缺点</h2>
<ul>
<li>当代码块很复杂，或者内部有大量的嵌套或读写操作时，如果一味的使用箭头函数，远不如 <code>function</code> 的形式可读性好。</li>
</ul>
<h1 id="参考">参考</h1>
<ul>
<li>&lt;&lt;你不知道的 JS&gt;&gt; 一书。</li>
<li>ECMACript 6 入门。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[this 到底指向哪]]></title>
        <id>https://superpony.github.io/post/meng-bi-de-this</id>
        <link href="https://superpony.github.io/post/meng-bi-de-this">
        </link>
        <updated>2019-12-01T11:29:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>在 JS 中，this 真的是一个非常重要，非常重要，非常重要（重要的事情说三遍）的关键知识点，重要到如果不能理解它，绝大部分的开发都无法完成。</p>
<p>但是由于 this 的过于灵活，导致 this 的指向经常会出现意想不到的情况，让人（可能只有我😓）懵逼，所以不能彻底搞清 this 的指向的 JS 人员，不是一个合格的 J（鸡）S（屎） 人员。🤓</p>
<h1 id="本质">本质</h1>
<p>任何东西总有它的本质， this 也不例外。就我个人而言根据，根据一些资料的学习和参考，觉着 JS 的本质有两点。</p>
<ul>
<li>this 在非严格模式下总是会返回一个对象，也许这个对象不是自己所想要的。</li>
<li>this 的指向千万不要被它的单词表面意思所迷惑，this 的指向取决于调用函数时的上下文环境，又或者说， this 的指向取决于函数调用的位置。</li>
</ul>
<h1 id="指向规则">指向规则</h1>
<h2 id="默认绑定">默认绑定</h2>
<p>默认绑定规则即独立的函数调用，也可以理解为这种规则是在 没有其他规则适用情况下时的调用规则，默认绑定在没有使用严格模式下时， this 指向 window 对象，严格模式下，则指向了 undefined。</p>
<pre><code>    // 注意，严格模式下，默认规则指向 window 对象是不合法的， 因此指向 undefined
  
    var demo = 'i am demo'
    function func() {
      // 'use strict'
      console.log(this.demo)
    }
    func() // i am demo
</code></pre>
<h2 id="隐meng式bi绑定">隐（meng）式（bi）绑定</h2>
<p>隐式绑定也是最能体现 <strong>this 的指向是取决于调用的上下文环境</strong> 这一特性的绑定模式，当一个调用点在拥有环境对象或者说 容器对象、拥有者对象时。它的 this 就指向了它的环境对象。</p>
<pre><code>    function func() {
      console.log(this.name)
    }

    var objA = {
      name: 'objA',
      func: func
    }

    var objB = {
      name: 'objB',
      func: func
    }

    var objC = {
      name: 'objC',
      func() {
        console.log(this.name)
      }
    }

    objA.func() // objA
    objB.func() // objB
</code></pre>
<p>注意：无论是 objA，B 中 func 是被引用添加的，还是 objC 中 func 的直接定义， func 函数都不是被 <code>obj</code> 真正的拥有或者包含，<code>obj</code> 仅仅只是<strong>在调用时的这个时间点拥有这个函数</strong>。</p>
<h3 id="隐式丢失">隐式丢失</h3>
<p>this 绑定另外让人抓狂的一种情况就是， this 在隐式绑定下，丢失绑定的情况。这样就意味着，它会退回的默认绑定上。</p>
<pre><code>    var objA = {
      name: 'objA',
      func() {
        console.log(this)
      }
    }
    // demo 的引用看起来是 objA.func，但其实仅仅是 func，因此 demo 由于不具备 具体的环境对象时，则根据默认规则 this 指向了 window。
    var demo = objA.func
    demo() // window 对象。
</code></pre>
<p>另一种情况，在回调函数下：</p>
<pre><code>    var objA = {
      name: 'objA',
      func(callBack) {
        callBack()
      }
    }

    // callBack 的上下文是 func 函数，而不是 objA 环境对象，因此指向 window
    objA.func(function() {
      console.log(this)
    }) // window

    var objB = {
      name: 'objB',
      func() {
        console.log(this)
      }
    }

    setTimeout(objB.func, 100) // window
    // 等价于
    setTimeout(function() {
      console.log(this)
    }, 100) // window
</code></pre>
<h2 id="new-绑定">new 绑定</h2>
<p>new 的对象中，this 的指向默认为这个新构建的对象。</p>
<pre><code>    function construct(name) {
      this.name = name
      this.func = function() {
        console.log(this)
      }
    }

    var demo = new construct('construct')
    demo.func() //  construct
</code></pre>
<h2 id="明确绑定">明确绑定</h2>
<p>为了解决 this 指向的不固定问题， JS 提供了 3个 api 以及 ES6推出的箭头函数，来固定 this 的指向。</p>
<h3 id="三个-api">三个 api</h3>
<ul>
<li><code>Fcuntion.prototype.call(obj, funcParam...)</code></li>
<li><code>Fcuntion.prototype.apple(obj, [funcParam...])</code></li>
<li><code>Fcuntion.prototype.bind(obj),</code></li>
</ul>
<h3 id="将-this-赋予变量">将 this 赋予变量</h3>
<p>通过一种“委曲求全” 的方式，在 this 指向是我们想要的时候，将其赋予变量，然后通过操作该变量的形式，来折中的进行代码开发。</p>
<pre><code>    var obj = {
      a: 'obj',
      demoA() {
        console.log(this) // obj
        var that = this
        var demoB = (function() {
          console.log(that) // obj
        })()
      }
    }
    obj.demoA()
</code></pre>
<h3 id="箭头函数">箭头函数</h3>
<p>通过 ES6 的箭头函数，来固定 this 的指向， 箭头函数与传统的 <code>function</code> 声明出来的函数，不太一样， 箭头函数的 this 指向是<strong>定义时所在的对象</strong>，而不是调用时根据上下文环境进行判断。又或者说， 箭头函数的 this 就是另一种形式的 <code>var that = this</code>。</p>
<h2 id="规则优先级">规则优先级</h2>
<p>在 this 绑定的四种规则下，优先级顺序为 明确绑定｜new 绑定 &gt; 隐式绑定 &gt; 默认绑定，由于 new 和 三个绑定的 api 无法同时使用，因此明确绑定 和 new 没有办法直接比较。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TCP / IP 协议 流程]]></title>
        <id>https://superpony.github.io/post/tcp-ip-xie-yi-xue-xi</id>
        <link href="https://superpony.github.io/post/tcp-ip-xie-yi-xue-xi">
        </link>
        <updated>2019-11-09T01:49:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="整体架构">整体架构</h1>
<p>直接上图：<br>
<img src="https://superpony.github.io//post-images/1573265456277.png" alt="" loading="lazy"></p>
<h1 id="tcp-ip-的一些基础知识">TCP / IP 的一些基础知识</h1>
<p>在进行每一层的学习前，有必要了解一些基础的概念，来让我们对要学习的东西，有一点基础的概念。</p>
<h2 id="tcp-ip-到底是什么">TCP/ IP 到底是什么</h2>
<p>从字面而言，可能会有人认为是 TCP 和 IP 两种协议；而在实际生活中，有时确实也就是指这两种协议。但在大部分情况下， TCP / IP 协议只是 利用 IP 进行通信时所必须用到的<strong>协议群的统称</strong>，也就是说 IP 、 TCP 、 HTTP、 FTP 协议等等都可以泛指为 TCP / IP 协议。而且 TCP / IP 协议原本也正是为了互联网而开发制定的协议。</p>
<figure data-type="image" tabindex="1"><img src="https://superpony.github.io//post-images/1573265778966.png" alt="" loading="lazy"></figure>
<h2 id="包-帧-数据包-段-消息">包、帧、数据包、段、消息</h2>
<p>以上五个术语，都是用来描述数据的单位，只不过区别在于，在不同阶段，名称不同。</p>
<ul>
<li>包可以是全能术语。</li>
<li>帧是链路层中包的名称，帧不仅具有首部，数据，还拥有尾部。</li>
<li>数据包是 IP 和 UDP 等网络层以上的分层中包的名称。</li>
<li>段则表示 TCP 数据流中的信息。</li>
<li>消息是指应用协议中数据的单位。</li>
</ul>
<p>在网络传输中的每个分层中，都会对所发送的数据附加一个首部，在这个首部中，包含了该层必要的信息，如发送的目标地址以及协议相关信息。通常而言，为协议提供的信息为包首部，所要发送的内容为数据（俄罗斯套娃）。在下一层的角度看，上一层收到的包全部都被认为成是本层的数据。<br>
<img src="https://superpony.github.io//post-images/1573287483771.png" alt="" loading="lazy"></p>
<p>如上图所述，网络中传输的<strong>数据包</strong>由两部分组成，一部分是本层中协议所要用到的首部，另一部分是上一层传输过来的数据。首部的具体结构由协议的具体规范定义。在数据包的首部，明确了协议应该如何读取数据。通俗的讲，看到了首部，也就能够了解该协议必要的信息及所要处理的数据，包首部就像协议的使用说明书。</p>
<h2 id="数据处理流程">数据处理流程</h2>
<figure data-type="image" tabindex="2"><img src="https://superpony.github.io//post-images/1573288241945.png" alt="" loading="lazy"></figure>
<ol>
<li>① 应用程序处理首先应用程序会进行编码处理，这些编码相当于 OSI 的表示层功能；编码转化后，数据不一定马上被发送出去，这种何时建立通信连接何时发送数据的管理功能，相当于 OSI 的会话层功能。</li>
<li>② TCP 模块的处理TCP 根据应用的指示，负责建立连接、发送数据以及断开连接。TCP 提供将应用层发来的数据顺利发送至对端的可靠传输。为了实现这一功能，需要在数据的前端附加一个 TCP 首部。</li>
<li>③ IP 模块的处理IP 将 TCP 传过来的 TCP 首部和 TCP 数据合起来当做自己的数据，并在 TCP 首部的前端加上自己的 IP 首部。IP 包生成后，参考路由控制表决定接受此 IP 包的路由或主机。</li>
<li>④ 网络接口（以太网驱动）的处理从 IP 传过来的 IP 包对于以太网来说就是数据。给这些数据附加上以太网首部并进行发送处理，生成的以太网数据包将通过物理层传输给接收端。</li>
<li>⑤ 网络接口（以太网驱动）的处理主机收到以太网包后，首先从以太网包首部找到 MAC 地址判断是否为发送给自己的包，若不是则丢弃数据。如果是发送给自己的包，则从以太网包首部中的类型确定数据类型，再传给相应的模块，如 IP、ARP 等。这里的例子则是 IP 。</li>
<li>⑥ IP 模块的处理IP 模块接收到 数据后也做类似的处理。从包首部中判断此 IP 地址是否与自己的 IP 地址匹配，如果匹配则根据首部的协议类型将数据发送给对应的模块，如 TCP、UDP。这里的例子则是 TCP。另外，对于有路由器的情况，接收端地址往往不是自己的地址，此时，需要借助路由控制表，在调查应该送往的主机或路由器之后再进行转发数据。</li>
<li>⑦ TCP 模块的处理在 TCP 模块中，首先会计算一下校验和，判断数据是否被破坏。然后检查是否在按照序号接收数据。最后检查端口号，确定具体的应用程序。数据被完整地接收以后，会传给由端口号识别的应用程序。</li>
<li>⑧ 应用程序的处理接收端应用程序会直接接收发送端发送的数据。通过解析数据，展示相应的内容</li>
</ol>
<h1 id="应用层">应用层</h1>
<p>在理论上而言，有了下面三层(传输层，网络层，链路层)，数据已经可以从一台主机发送到另一台主机，但此时的数据仍然是字节流，不能很好的被对应的应用程序（浏览器、文件服务、虚拟终端等等）识别，且操作性差。因此，应用层定义了各种各样的协议来规范数据格式，方便对应的应用程序操作。常见的协议例如 HTTP、FTP、SMTP 等。以 HTTP 协议举例， 该协议主要用于 B/S架构<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 之间的数据通信,其报文格式如下：<br>
<img src="https://superpony.github.io//post-images/1573289920299.png" alt="" loading="lazy"></p>
<p>在 Request Headers 中， Accept 表示客户端（浏览器）希望接收的数据格式，而 Response Headers 中，Content-type 则是 服务端响应回来的数据格式，一般与 客户端希望接收的数据格式相同。</p>
<p>当有了这个规范以后，服务端在接收到请求后，就能正确的解析客户端发来的请求，且当请求处理完毕以后，再按照客户端要求的格式返回，客户端收到结果后，按照服务端返回的格式进行解析。</p>
<p>所以，应用层主要的工作就是，<strong>定义数据格式并按照对应的格式进行解读数据</strong>。</p>
<h1 id="传输层">传输层</h1>
<p>链路层定义了主机的身份，即 MAC 地址，而网络层定义了 IP 地址，明确了主机所在的网段，有了这两个地址后，数据包就可以从一个主机发送到另一个主机。但在实际的场景中，是由发送机的某个应用程序发送给接收机的某个应用程序。而每台机子，是可以同时运行多个程序的，所以当数据包到了指定的接收主机后，无法确认是那个应用程序来接收数据包。</p>
<p>因此，传输层引入了 UDP 协议 来解决这个问题，为了给每个应用程序表识身份， UDP 协议引入了端口这个概念，即同一个主机上的每个应用程序都需要有一个唯一的端口号，并且规定了<strong>数据在传输时，必须定义 源端口和目标端口</strong>。这样，当数据包到达接收主机后，就可以根据数据包里的端口号找到对应的程序。而 UDP 协议定义的数据包，就叫做 UDP 数据包。</p>
<p>传输层的主要工作就是：<strong>定义端口，标识应用程序， 实现端口到端口的通信，而 TCP 协议保证了数据传输的可靠性。</strong></p>
<h2 id="udp-协议">UDP 协议</h2>
<p>UDP 数据包比较简单，容易实现，但它有一个弊端，即没有确认机制，当数据包一旦发出，无法得知对方是否成功接收，因此可靠性比较差。因此 TCP 协议由此而生。</p>
<h2 id="tcp-协议">TCP 协议</h2>
<p>TCP 协议即控制传输协议，是一种面向链接，可靠，基于字节流的通信协议。以最简单的方式来讲， <strong>TCP 协议就是拥有确认机制的 UDP 协议</strong>， TCP 协议每发出的一个包，都要求接收方确认，如果有一个包丢失，就收不到确认，发送方就会重新发送这个包。</p>
<p>TCP 依靠 <strong>3次握手，4次握手</strong> 的机制来保证数据的可靠性。</p>
<h2 id="传输层数据包">传输层数据包</h2>
<p>数据包由 首部和数据两部分组成，首部主要包含了目标 端口 和源 端口。</p>
<h1 id="网络层">网络层</h1>
<p>网络层的主要工作是 <strong>定义网络地址，区分网段，子网内寻 MAC 寻址，对于不同子网的数据包进行路由</strong></p>
<h2 id="ip-协议">IP 协议</h2>
<p>每一个网卡的 MAC 地址，只与厂商有关，与所处的网络无关，所以无法通过 MAC 地址 来判断 两台主机是否属于同一个子网之内。因此，为了解决这个问题， 网络层引入了 IP 协议，通过定制一套新的地址，让我们能够区分 两台主机是否属于一个网络，这套地址就是网络地址，又称 IP 地址。</p>
<p>IP 地址目前有两个 版本， IPV4 和 IPV6，IPV4 是一个 32 位的地址，常用 4个十进制的数字表示，IPV4 将这个 32位的协议分为两个部分，前面的部分是网络地址，后边的地址是 局域网内的主机地址。由于各类地址的分发不尽相同，所以以 C类 地址 192.168.24.101 为例，其中前面 24 位，就是网络地址，后面 8 位就是主机地址。因此，**如果两个 IP 在同一个子网，则必定它们的网络地址也相同。**为了判断IP地址中的网络地址，IP协议还引入了子网掩码， IP地址和子网掩码通过按位与运算后就可以得到网络地址。</p>
<p>由于发送者和接收者的 IP 地址是已知的（应用层协议会传入），所以只需要通过子网掩码对两个IP地址进行AND运算后就能够判断双方是否在同一个子网了。</p>
<h2 id="arp-协议">ARP 协议</h2>
<p>即地址解析协议，是根据 IP 获取 MAC 地址的一个网络协议，工作原理如下：</p>
<p>ARP 首先会发起一个请求数据包，该数据包的首部包含了目标主机的 IP ，然后这个数据包在链路层进行再次包装，生成以<strong>太网数据包</strong>，最终由以太网广播给子网内的所有主机，每台目标子网内的主机都会接收到这个数据包，并取出来头部的 IP 地址，然后和自己的 IP 进行比较，如果相同就返回自己的 MAC 地址，如果不同就丢弃该数据包。 ARP 接收返回的消息，以此确定目标机的 MAC 地址。与此同时， ARP 还会将 返回的 MAC 地址与对应的 IP 地址存入本机的  ARP 缓存中一段时间，下次请求直接调取缓存来节约资源，也就是 <strong>RARP 协议</strong>。</p>
<h2 id="路由协议">路由协议</h2>
<p>网络层会首先通过 IP 协议来判断两台主机是否同处于一个子网内，如果是，就直接通过 ARP 协议在子网内通过广播的形式，发送数据包查询对应的目标机 MAC 地址。如果不是，则以太网会将该数据包转发给本子网的网关进行路由，网关是互联网上子网与子网的桥梁，所以网关会进行多次转发，最终将数据包转发到 目标 IP 的子网中，然后再通过目标 IP 的网关进行 ARP 协议的广播获取目标机的 MAC 地址。</p>
<p>而完成这个路由协议的物理设备就是路由器，在错综复杂的网络世界里，路由器扮演者交通枢纽的角色，它会根据信道情况，选择并设定路由，以最佳路径来转发数据包</p>
<h2 id="ip-数据包">IP 数据包</h2>
<p>IP 数据包由 首部和数据两部分组成，首部主要包含了目标 IP 和源 IP。</p>
<h1 id="链路层">链路层</h1>
<p>网络通信就是把有特定意义的数据通过物理介质传送给对方，单纯的发送 0 和 1 是没有意义的，要传输有意义的数据，就需要以字节为单位对 0 和 1 进行分组，并且要标识好每一组电信号的信息特征，然后按照分组的顺序依次发送。以太网规定一组电信号就是一个数据包，一个数据包被称为一帧， 制定这个规则的协议就是以太网协议。</p>
<p>整个数据帧由首部、数据和尾部三部分组成，首部固定为14个字节，包含了目标 MAC 地址、源 MAC 地址和类型；数据最短为46个字节，最长为1500个字节，如果需要传输的数据很长，就必须分割成多个帧进行发送；尾部固定为4个字节，表示数据帧校验序列，用于确定数据包在传输过程中是否损坏。因此，以太网协议通过对电信号进行分组并形成数据帧，然后通过物理介质把数据帧发送给接收方。那么以太网如何来识接收方的身份呢？</p>
<p>以太网规协议定，接入网络的设备都必须安装网络适配器，即网卡， 数据包必须是从一块网卡传送到另一块网卡。而网卡地址就是数据包的发送地址和接收地址，也就是帧首部所包含的 MAC 地址，MAC 地址是每块网卡的身份标识，就如同我们身份证上的身份证号码，具有全球唯一性。MAC 地址采用十六进制标识，共6个字节， 前三个字节是厂商编号，后三个字节是网卡流水号，例如 4C-0F-6E-12-D2-19</p>
<p>有了 MAC 地址以后，以太网采用广播形式，把数据包发给该子网内所有主机，子网内每台主机在接收到这个包以后，都会读取首部里的目标 MAC 地址，然后和自己的 MAC 地址进行对比，如果相同就做下一步处理，如果不同，就丢弃这个包。</p>
<p>所以链路层的主要工作就是<strong>对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方</strong>。</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://www.cnblogs.com/onepixel/p/7092302.html">深入牵出 TCP /IP 协议栈</a></li>
<li><a href="https://juejin.im/post/5a069b6d51882509e5432656#heading-51">一篇文章带你熟悉 TCP/IP 协议</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>B/S架构：即浏览器（Browser）和服务器（Server）架构。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS 中 undefined 到底是个啥]]></title>
        <id>https://superpony.github.io/post/js-zhong-undefined-dao-di-shi-ge-sha</id>
        <link href="https://superpony.github.io/post/js-zhong-undefined-dao-di-shi-ge-sha">
        </link>
        <updated>2019-11-08T02:47:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>很多经典的 JS 教程中，都会讲 undefined 和 null的区别， undefined 表示 &quot;尚未定义&quot;，而 null 则代表着 “定义了但是为空”。 而在一些 JS 规范中，经常会提到，用 void 0 来获取 undefined 值 而不是直接 获取 undefined 的值。</p>
<p>于是问题就来了， undefined 和 null 的区别仅仅在于二者的字面含义不同吗，而为什么 在一些 JS 规范中，要求 void 0 代替 直接使用 undefined，只是为了节省3个字节吗？</p>
<h1 id="undefined-是一个变量">undefined 是一个变量</h1>
<p>区别在于， null 是 JS 中的关键字，而 undefined 却是一个变量，这也是 JS 这门语言公认的设计失误之一。在 ES5之前，全局下的 undefined 是可写的，而之所以用 void 0 来取 undefined 值，就是为了防止 某些极端情况下， undefeined 被重写。</p>
<p>注意： ES5开始， undefeined 在全局环境下虽然不可写了，但是，在局部环境，仍然可以重新声明且可写。</p>
<p>参考:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined">MDN</a></p>
<p>测试代码：</p>
<pre><code>    var undefined = &quot;hi&quot;;
    console.log(undefined); //  输出 undefined

    // undefine 是变量，所以可以赋值。
    function testUndefined() {
        var undefined = &quot;i'm undefined&quot;;
        console.log(undefined); // 输出 i'm undefined
    }

    // 报错， null 是关键字
    // function testNull() {
    //     var null = &quot;i'm null&quot;;
    //     console.log(null);
    // }
    
    testUndefined();
    //testNull();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于技术方面的学习方法和路线]]></title>
        <id>https://superpony.github.io/post/guan-yu-ji-zhu-fang-mian-de-xue-xi-fang-fa-he-lu-xian</id>
        <link href="https://superpony.github.io/post/guan-yu-ji-zhu-fang-mian-de-xue-xi-fang-fa-he-lu-xian">
        </link>
        <updated>2019-11-07T10:20:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>写这篇文章的原因是，最近这两天在学习 极客时间 上面程劭非老师的 <strong><a href="https://time.geekbang.org/column/intro/100023201">重学前端</a></strong> 课程，在读完第一章的 明确前端学习路线与方法 后，觉着写的很好，在尝试去理解之后，觉着不仅可以用于在前端的学习之上，在学习其他的编程语言上，也完全适用，于是就想着写点东西，一篇参杂着我个人理解的笔记。</p>
<p>在刚学习 至 1年内相关工作经验的时候，因该把侧重点放在基础知识上，地基打得牢，楼才建的高。这一年也是最关键的一年，因为这一年的学习，正是构架自己 <strong>知识架构</strong> 的黄金时期。</p>
<h1 id="学习的两种方法">学习的两种方法</h1>
<ol>
<li>构建自己的知识架构。</li>
<li>追本溯源。</li>
</ol>
<h1 id="什么是知识架构">什么是知识架构</h1>
<p>知识架构可以理解为你自己 知识的目录或索引，它可以把我们的知识，或是那些零散的<strong>知识组织串联起来</strong>，同时也可以帮助我们发现自己的知识盲区，不足之处。<br>
注意：知识架构是有优劣之分的，而区分优劣最重要的评判标准就是，你的知识架构，它的<strong>逻辑性和完备性如何</strong>。</p>
<h2 id="举例">举例</h2>
<p>如果我们尝试做了一个自己的知识架构，是如下这个样子的，那就是不好的。</p>
<ul>
<li>类型转换；</li>
<li>this 指针；</li>
<li>闭包；</li>
<li>作用域链；</li>
<li>......</li>
</ul>
<p>为什么不好？因为这种知识架构，知识之间没有任何的逻辑性可言，知识之间，既不是循序渐进的递进关系，也不是平级关系，更不具备完备性。</p>
<h1 id="如何做知识架构">如何做知识架构</h1>
<p>以 JS 搭建最顶层为例：</p>
<ul>
<li>文法</li>
<li>语义</li>
<li>运行时</li>
</ul>
<p>之所这么分，是因为，对于任何计算机语言而言，必然是“用规定的文法，去表达特定的语义，最终操作运行时”的一个过程。<br>
这么以来，不管你学习的是什么 JS 的知识，都不会越出这个范围，这就是知识架构的完备性。</p>
<p>接下来继续往下分：</p>
<ul>
<li>文法
<ul>
<li>词法</li>
<li>语法</li>
</ul>
</li>
<li>语义</li>
<li>运行时
<ul>
<li>类型</li>
<li>执行过程</li>
</ul>
</li>
</ul>
<p>文法可以向下分为 词法和语法，这是来自编译的划分，同样是具有完备性的。语义跟语法具有一一对应的关系。<br>
对于运行时的部分，有一句很有名的话叫做： **程序 = 算法 + 数据结构 **，那么对于运行时来说，类型就是数据结构，执行过程就是算法。<br>
而如果继续往下分，词法之中就包含了 直接量，关键字，运算符等等，语法和语义则就包含了 表达式，语句，函数，对象，模块 等。</p>
<h1 id="个人理解">个人理解</h1>
<p>我个人认为，不一定要完全按照上面这份分类方法，因为每个人对于一门知识的“内力“深浅是不同的，就注定了理解是不同的，而如果一味的邯郸学步，只会是害自己。所以，我个人认为，对于构建自己的知识架构上，我们要学的，就是一句话 <strong>一定要确保自己的知识架构是具有逻辑性和完备性的</strong>，或者说，自己的知识架构，一定要是由浅入深，循序渐进的；且最顶层的结构，一定要是最大的范围，任何 JS 知识点，都跳不出这个范围。</p>
<h1 id="追本溯源">追本溯源</h1>
<p>有一些知识，它的背后是有一个很大的体系的，例如 CSS 中， width 和 display 。 这两个属性都是知识，但其背后的知识量，完全是不可比肩的。 width 属性看到单词就可以知道是什么意思什么作用，它只是一个单纯的数值。而 display 就不一样了，如果想彻底搞清楚 display 就必须去学习和理解正常流，弹性布局等等知识。<br>
又或者一些知识，涉及的概念本身经历了各种历史变迁，变得非常复杂和具有争议性，例如 MVC，从 1979 年至今，概念变化是非常大的。<br>
像这种时候，就需要做一些考古工作了，而追本溯源就是通过 关注 技术提出的背景，关注原始的论文或文章，或是关注作者说的话。通过这种方式，可以帮助我们去理解一些看上去不合理的东西和问题。</p>
<h1 id="个人理解-2">个人理解</h1>
<p>当我们遇到一些看起来“很怪”，“很不合理” 的东西时，也许可以通过追溯历史背景，追溯源头的方式，来理解这个东西。而当我们遇到一些背后知识量很大或是很生涩难以理解的知识时，可以通过去学习其底层的方法，来学习它。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 中的权重/优先级]]></title>
        <id>https://superpony.github.io/post/css-zhong-de-quan-chong-you-xian-ji</id>
        <link href="https://superpony.github.io/post/css-zhong-de-quan-chong-you-xian-ji">
        </link>
        <updated>2019-11-06T08:52:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="这是啥">这是啥？</h1>
<p>CSS 中的权重决定了假如一个元素被赋予了多个 CSS 样式，且多个样式中，有相同的属性，那么它最终渲染的结果使用的是那一个样式中的属性，也就是说， CSS的权重，决定了元素最终的样式。</p>
<p>举个例子：</p>
<pre><code>&lt;template&gt;
    &lt;div class=&quot;demo&quot; id=&quot;demo&quot; style=&quot;color:red;&quot;&gt; hello world &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
    export default {

    }
&lt;/script&gt;

&lt;style scoped&gt;
    .demo {
        color: blue;
    }

    #demo {
        font-size: 50px;
        color: green;
    }
&lt;/style&gt;
</code></pre>
<p>上面的代码，最终这个 div 内的文字最终渲染结果是什么？🤔<br>
答案是，红色的字，字体大小50px。<br>
为什么会是这个结果，因为这就是 CSS 权重比较之后的结果，字体颜色是红色的，是因为行内式的权值是最高的，而字体大小是 50px 是因为，在所有选择器中，只有一个 关于字体大小的定义，所以它直接生效。</p>
<h1 id="css-权值">CSS 权值</h1>
<p>每一个CSS的选择器都有一个相对的重要程度值，也就是权重的值，简称权值。当多个选择器作用于一个元素上且多个选择器内有相同的属性时，那个选择器的权值大，相同的属性最终就用谁的。</p>
<h2 id="权值等级">权值等级</h2>
<ul>
<li>第一等级：行内样式， 例如 <code>&lt;input style=&quot;&quot; /&gt;</code> ,权值为 1，0，0，0</li>
<li>第二等级：ID 选择器，权值 0，1，0，0</li>
<li>第三等级：class，伪类，属性选择器，权值0，0，1，0</li>
<li>第四等级：元素选择器，伪元素选择器，权值 0，0，0，1</li>
<li>第五等级：通配符选择器，子选择器，相邻兄弟 等选择器 权值 0，0，0，0</li>
</ul>
<h2 id="权值计算公式">权值计算公式</h2>
<p>权值 = 第一等级选择器*个数,第二等级选择器*个数,第三等级选择器*个数,第四等级选择器*个数；</p>
<h1 id="优先级总结">优先级总结</h1>
<ul>
<li>先进行高等级比较，如果相同，再比较下一等级，以此类推。</li>
<li>如果权值完全相同的话，采用 后者优先的原则（样式覆盖）。</li>
<li>CSS 属性后如果追加 !important  时，无条件绝对优先。</li>
</ul>
<h1 id="注意">注意</h1>
<p>网上有一些关于权值计算的文章中，会出现把权值的计算理解为 权值 = 第一等级选择器 * 个数 + 第二等级选择器 * 个数 + 第三等级选择器 * 个数 + 第四等级选择器*个数； 也就是说把权值的计算理解为了 等级*各自个数再求和。举个例子：</p>
<pre><code>&lt;template&gt;
    &lt;div id=&quot;demo&quot; class=&quot;a b c d e f g h i j k&quot;&gt; i'm a man &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
    export default {

    }
&lt;/script&gt;

&lt;style scoped&gt;
    .a,
    .b,
    .c,
    .d,
    .e,
    .f,
    .g,
    .h,
    .i,
    .j,
    .k {
        font-size: 50px;
        color: blue;
    }

    #demo {
        color: red;
    }
&lt;/style&gt;
</code></pre>
<p>上面的代码，如果按照 等级*各自选择器个数再求和 的公式来计算，第一个选择器的权值为：1000*0+100*0+10*11+1*0 = 110。  第二个选择器权值为 1000*0+100*1+10*0+1*0 = 100。 则最终 实际渲染结果为 蓝色的字，50px大小。<br>
但最终结果却是， 红色的字 50px 大小。因为，低等级的选择器，无论个数再多，也是无法越等级的。则实际计算结果因该是 第一个选择器权值： 0，0，11，0 。 第二个选择器权值 0，1，0，0 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 规范标准]]></title>
        <id>https://superpony.github.io/post/css-gui-fan-biao-zhun</id>
        <link href="https://superpony.github.io/post/css-gui-fan-biao-zhun">
        </link>
        <updated>2019-11-06T08:27:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="代码风格">代码风格</h1>
<ul>
<li>采用 UTF-8 编码， 在 CSS 头部引用 @charset &quot;utf-8&quot;。</li>
<li>以 4 个空格作为缩进。</li>
<li>每行不超过 120 字符，除非单行不可分割。</li>
<li>选择器嵌套层级不大于 3 级。</li>
<li>尽量不要使用 @import，因为 与 <links> 相比， @import 速度更慢，增加了额外的页面请求，并可能导致无法预料的问题。</li>
<li>Media Query不得单独编排，必须与相关的规则一起定义。</li>
</ul>
<h1 id="样式属性排序">样式属性排序</h1>
<h2 id="布局位置">布局位置</h2>
<p>display &gt; position &gt; top &gt; right &gt; bottom &gt; left &gt; z-index &gt; float &gt; clear &gt; vertical-align &gt; list-style &gt; content</p>
<h2 id="自身属性">自身属性</h2>
<p>width &gt; height &gt; padding &gt; border &gt; margin  &gt; background</p>
<h2 id="文本属">文本属</h2>
<p>font &gt; font-size &gt; font-weight &gt; font-family &gt; text-align &gt; text-decoration &gt; text-indent &gt; line-height</p>
<p>white-space &gt; text-ellipsis</p>
<h2 id="其他属性">其他属性</h2>
<p>color &gt; background &gt; cursor &gt; zoom</p>
<h2 id="css3属性">css3属性</h2>
<p>box-sizing &gt; box-shadow &gt; border-radius &gt; transform &gt; transition</p>
<h1 id="书写规范">书写规范</h1>
<ul>
<li>优先使用可以缩写的属性。</li>
<li>取消小数点前的 0。</li>
</ul>
<pre><code>font-size: 0.5em; /*bad*/ 
font-size: .5em; /*good*/ 
</code></pre>
<h1 id="命名单词">命名单词</h1>
<p>头：header</p>
<p>内容：content/container</p>
<p>尾：footer</p>
<p>导航：nav</p>
<p>侧栏：sidebar</p>
<p>栏目：column</p>
<p>页面外围控制整体佈局宽度：wrapper</p>
<p>左右中：left right center</p>
<p>登录条：loginbar</p>
<p>标志：logo</p>
<p>广告：banner</p>
<p>页面主体：main</p>
<p>热点：hot</p>
<p>新闻：news</p>
<p>下载：download</p>
<p>子导航：subnav</p>
<p>菜单：menu</p>
<p>子菜单：submenu</p>
<p>搜索：search</p>
<p>友情链接：friendlink</p>
<p>页脚：footer</p>
<p>版权：copyright</p>
<p>滚动：scroll</p>
<p>内容：content</p>
<p>标签：tags</p>
<p>文章列表：list</p>
<p>提示信息：msg</p>
<p>小技巧：tips</p>
<p>栏目标题：title</p>
<p>加入：joinus</p>
<p>指南：guide</p>
<p>服务：service</p>
<p>注册：regsiter</p>
<p>状态：status</p>
<p>投票：vote</p>
<p>合作伙伴：partner</p>
<p>ID的命名-页面结构</p>
<p>容器: container</p>
<p>页头：header</p>
<p>内容：content/container</p>
<p>页面主体：main</p>
<p>页尾：footer</p>
<p>导航：nav</p>
<p>侧栏：sidebar</p>
<p>栏目：column</p>
<p>页面外围控制整体佈局宽度：wrapper</p>
<p>左右中：left right center</p>
<p>ID的命名-导航</p>
<p>导航：nav</p>
<p>主导航：mainnav</p>
<p>子导航：subnav</p>
<p>顶导航：topnav</p>
<p>边导航：sidebar</p>
<p>左导航：leftsidebar</p>
<p>右导航：rightsidebar</p>
<p>菜单：menu</p>
<p>子菜单：submenu</p>
<p>标题: title</p>
<p>摘要: summary</p>
<p>ID的命名-功能</p>
<p>标志：logo</p>
<p>广告：banner</p>
<p>登陆：login</p>
<p>登录条：loginbar</p>
<p>注册：register</p>
<p>搜索：search</p>
<p>功能区：shop</p>
<p>标题：title</p>
<p>加入：joinus</p>
<p>状态：status</p>
<p>按钮：btn</p>
<p>滚动：scroll</p>
<p>标签页：tab</p>
<p>文章列表：list</p>
<p>提示信息：msg</p>
<p>当前的: current</p>
<p>小技巧：tips</p>
<p>图标: icon</p>
<p>注释：note</p>
<p>指南：guild</p>
<p>服务：service</p>
<p>热点：hot</p>
<p>新闻：news</p>
<p>下载：download</p>
<p>投票：vote</p>
<p>合作伙伴：partner</p>
<p>友情链接：link</p>
<p>版权：copyright</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BEM]]></title>
        <id>https://superpony.github.io/post/bem</id>
        <link href="https://superpony.github.io/post/bem">
        </link>
        <updated>2019-11-06T07:08:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是-bem">什么是 BEM</h1>
<ul>
<li>BEM 是俄罗斯团队 Yandex 团队提出的一种 CSS 命名方法，通过组件化/模块化的命名思想，让 CSS 的结构和命名语义更佳规范和透明，便于维护。</li>
</ul>
<h1 id="bem-的构成">BEM 的构成</h1>
<ul>
<li>BEM 由 块（block）、元素（element）、修饰符（modifier） 三个部分构成。</li>
<li>命名约定的规范如下：</li>
</ul>
<pre><code>    /* 块 */
    .my-block {}

    /* 元素 */
    .my-block__my-element {}

    /* 修饰符 */
    .my-block--my-modifier {}
    .my-block__my-element--my-modifier {}
</code></pre>
<ul>
<li>单词之间以 - 分割。</li>
</ul>
<h2 id="块">块</h2>
<ul>
<li>任何可以独立，复用而不依赖其他块的部分，都可以单独作为一个块。</li>
<li>块可以嵌套其他块，来实现业务逻辑。</li>
<li>例如 一个 from 表单，一个 header 头 都可以作为一个块，来为其单独命名。</li>
</ul>
<h2 id="元素">元素</h2>
<ul>
<li>元素是块的组成部分，对应块中的子元素/子节点。</li>
<li>元素的命名必须声名其所属的块名称。例如 <code>.my-from__input</code></li>
<li>块名与元素之间以 __  （双下划）线分割。</li>
</ul>
<h2 id="修饰符">修饰符</h2>
<ul>
<li>修饰符的意义在于让 块/元素拥有更丰富的外观或行为，来应对不同的情景。</li>
<li>修饰符不可以单独使用，它的意义是为了丰富 块/元素。</li>
<li>例如 buttom 按钮， 可以 为其定义 error 和 success 修饰符，分别为其定义属性，让其应对不同的情景。</li>
</ul>
<h2 id="示例">示例</h2>
<pre><code>&lt;template&gt;
    &lt;form class=&quot;my-form&quot;&gt;
        &lt;input class=&quot;my-form__input&quot; type=&quot;text&quot; /&gt;
        &lt;button class=&quot;my-form__button&quot;&gt;click me&lt;/button&gt;
        &lt;button class=&quot;my-form__button--danger&quot;&gt;don't click me&lt;/button&gt;
    &lt;/form&gt;
&lt;/template&gt;
&lt;script&gt;
    export default {

    }
&lt;/script&gt;

&lt;style lang=&quot;css&quot; scoped&gt;
    /* from 可以单独作为一个可以复用的组件，所以可以将其设置为一个单独的块 */
    .my-form {
        width: 500px;
        height: 500px;
    }

    .my-form__input {
        width: 100px;
    }

    .my-form__button {
        background-color: aqua;
    }

     /* 修饰符让 块/元素 拥有更丰富的语意和情景 */
    .my-form__button--status-success {
        background-color: green;
    }

    .my-form__button--status-danger {
        background-color: red;
    }
&lt;/style&gt; 
</code></pre>
<h1 id="bem-的好处">BEM 的好处</h1>
<ul>
<li>通过 组件化/模块化 的思想，让整个项目的 CSS 拆分，从而解耦合。</li>
<li>规范化的命名方式 <code>block__element--modifier</code> ,让整个 CSS 书写起来结构化更佳清晰，可读，灵活。</li>
<li>命名方法扁平化，可以避免样式层级过多而导致解析效率变低。</li>
</ul>
<h1 id="bem-的坏处">BEM 的坏处</h1>
<ul>
<li>命名过长。</li>
</ul>
<h1 id="总结">总结</h1>
<ul>
<li>利远大于弊。</li>
</ul>
]]></content>
    </entry>
</feed>